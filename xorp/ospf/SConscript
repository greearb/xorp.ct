# Copyright (c) 2009-2011 XORP, Inc and Others
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, Version 2, June
# 1991 as published by the Free Software Foundation. Redistribution
# and/or modification of this program under the terms of any other
# version of the GNU General Public License is not permitted.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. For more details,
# see the GNU General Public License, Version 2, a copy of which can be
# found in the XORP LICENSE.gpl file.
#
# XORP Inc, 2953 Bunker Hill Lane, Suite 204, Santa Clara, CA 95054, USA;
# http://xorp.net

# $XORP$

import os
Import('env')

subdirs = [
	'tests',
	'tools',
]

SConscript(dirs = subdirs, exports='env')

env = env.Clone()
is_shared = 'SHAREDLIBS' in env

env.AppendUnique(CPPPATH = [
    '#',
    '$BUILDDIR',
    ])

env.PrependUnique(LIBPATH = [
    '$BUILDDIR/libxorp',
    '$BUILDDIR/libcomm',
    '$BUILDDIR/libxipc',
    '$BUILDDIR/libproto',
    '$BUILDDIR/libfeaclient',
    '$BUILDDIR/policy/backend',
    '$BUILDDIR/policy/common',
    '$BUILDDIR/xrl/interfaces',
    '$BUILDDIR/xrl/targets',
    '$BUILDDIR/mrt',
    '.'
    ])

env.AppendUnique(LIBS = [
    'xorp_ospf',		# Refers to the library, not the executable.
    'xst_ospfv2',
    'xorp_policy_backend',
    'xorp_policy_common',
    'xorp_fea_client',
    'xif_rib',
    'xif_finder_event_notifier',
    'xif_fea_ifmgr_mirror',
    'xif_fea_ifmgr_replicator',
    'xif_fea_rawpkt4',
    'xst_fea_ifmgr_mirror',
    'xorp_ipc',
    'xorp_core',
    'xorp_proto',
    'xorp_comm',
])

if not ('disable_ipv6' in env and env['disable_ipv6']):
    env.AppendUnique(LIBS = [
        'xif_fea_rawpkt6',
        'xst_ospfv3',
        ])

env.Replace(RPATH = [
    env.Literal(env['xorp_module_rpath'])
])

libxorp_ospf_srcs = [
	     'auth.cc',
	     'area_router.cc',
	     'external.cc',
	     'fletcher_checksum.cc',
	     'lsa.cc',
	     'ospf.cc',
	     'packet.cc',
	     'peer_manager.cc',
	     'peer.cc',
	     'policy_varrw.cc',
	     'routing_table.cc',
	     'xrl_io.cc',
	     'xrl_target.cc',
	     'vlink.cc'
             ]

if not ('disable_ipv6' in env and env['disable_ipv6']):
    libxorp_ospf_srcs.append('xrl_target3.cc')

if not ('disable_profile' in env and env['disable_profile']):
    env.AppendUnique(LIBS = [
        'xif_profile_client',
        ])

if ('mingw' in env and env['mingw']):
    env.Append(LIBS = [
        'ws2_32',
        'iphlpapi',
#        'mprapi',
        'regex',
        'winmm',
        ])

    env.Append(LIBS = ['xorp_core', 'crypto', 'ws2_32'])

if is_shared:
    libxorp_ospf = env.SharedLibrary(target = 'libxorp_ospf',
				     source = libxorp_ospf_srcs,
				     LIBS = '')
    if env['rtld_origin']:
        for obj in libxorp_ospf:
            env.AddPostAction(libxorp_ospf,
                env.Symlink(obj.abspath,
                            os.path.join(env['xorp_alias_libdir'], str(obj))))
else:
    libxorp_ospf = env.StaticLibrary(target = 'libxorp_ospf',
				     source = libxorp_ospf_srcs,
				     LIBS = '')

ospfv2srcs = [ 'xorp_ospfv2.cc', ]
ospfv2 = env.Program(target = 'xorp_ospfv2', source = ospfv2srcs)
if env['enable_builddirrun']:
    for obj in ospfv2:
        env.AddPostAction(ospfv2,
            env.Symlink(obj.abspath,
                        os.path.join(env['xorp_alias_moduledir'], str(obj))))
env.Alias('install', env.InstallProgram(env['xorp_moduledir'], ospfv2))

if is_shared:
    env.Alias('install', env.InstallLibrary(env['xorp_libdir'], libxorp_ospf))

if not ('disable_ipv6' in env and env['disable_ipv6']):
    ospfv3srcs = [ 'xorp_ospfv3.cc' ]
    ospfv3 = env.Program(target = 'xorp_ospfv3', source = ospfv3srcs)
    if env['enable_builddirrun']:
        for obj in ospfv3:
            env.AddPostAction(ospfv3,
                env.Symlink(obj.abspath,
                            os.path.join(env['xorp_alias_moduledir'], str(obj))))
    env.Alias('install', env.InstallProgram(env['xorp_moduledir'], ospfv3))
    Default(ospfv2, ospfv3)
else:
    Default(ospfv2)
    

