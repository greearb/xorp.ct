# Copyright (c) 2009 XORP, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, Version 2, June
# 1991 as published by the Free Software Foundation. Redistribution
# and/or modification of this program under the terms of any other
# version of the GNU General Public License is not permitted.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. For more details,
# see the GNU General Public License, Version 2, a copy of which can be
# found in the XORP LICENSE.gpl file.
#
# XORP Inc, 2953 Bunker Hill Lane, Suite 204, Santa Clara, CA 95054, USA;
# http://xorp.net

# $XORP$

import os
Import('env')

env = env.Clone()

is_shared = 'SHAREDLIBS' in env

env.AppendUnique(CPPPATH = [
    '#',
    '$BUILDDIR',
    ])

env.AppendUnique(LIBPATH = [
    '$BUILDDIR/libxorp',
    '$BUILDDIR/libcomm',
    '$BUILDDIR/libxipc',
    '$BUILDDIR/libproto',
    '$BUILDDIR/libfeaclient',
    '$BUILDDIR/policy/backend',
    '$BUILDDIR/policy/common',
    '$BUILDDIR/xrl/interfaces',
    '$BUILDDIR/xrl/targets',
    '$BUILDDIR/mrt',
    '.'
    ])

env.AppendUnique(LIBS = [
    'xorp_mld6igmp',
    'xorp_fea_client',
    'xif_mld6igmp_client',
    'xif_fea_rawpkt4',
    'xif_fea_rawpkt6',
    'xif_fea_ifmgr_mirror',
    'xif_fea_ifmgr_replicator',
    'xif_cli_manager',
    'xif_finder_event_notifier',
    'xst_fea_ifmgr_mirror',
    'xst_mld6igmp',
    'xorp_mrt',
    'xorp_ipc',
    'xorp_core',
    'xorp_proto',
    'xorp_comm'
])

env.Replace(RPATH = [
    env.Literal(env['xorp_module_rpath'])
])

libmld6igmplitesrcs = [
	'mld6igmp_config.cc',
	'mld6igmp_group_record.cc',
	'mld6igmp_node.cc',
	'mld6igmp_node_cli.cc',
	'mld6igmp_proto.cc',
	'mld6igmp_source_record.cc',
	'mld6igmp_vif.cc',
	'xrl_mld6igmp_node.cc',
             ]

# XXX needs fixing for new world order

if is_shared:
    libmld6igmplite = env.SharedLibrary(target = 'libmld6igmplite', source = libmld6igmplitesrcs, LIBS = '')
    if env['rtld_origin']:
        for obj in libmld6igmplite:
            env.AddPostAction(libmld6igmplite,
                env.Symlink(obj.abspath,
                            os.path.join(env['xorp_alias_libdir'], str(obj))))

    env.Alias('install',
              env.InstallLibrary(env['xorp_libdir'], libmld6igmplite))
else:
    libmld6igmplite = env.StaticLibrary(target = 'libmld6igmplite', source = libmld6igmplitesrcs, LIBS = '')


igmplitesrcs = [
          'xorp_igmp.cc',
          ]

igmplite = env.Program(target = 'xorp_igmp_lite', source = igmplitesrcs)

mldlitesrcs = [
          'xorp_mld.cc',
          ]

mldlite = env.Program(target = 'xorp_mld_lite', source = mldlitesrcs)

env.Alias('install',
          env.InstallProgram(env['xorp_moduledir'], igmplite))
if env['enable_builddirrun']:
    for obj in igmplite:
        env.AddPostAction(igmplite,
            env.Symlink(obj.abspath,
                os.path.join(env['xorp_alias_moduledir'], str(obj))))

env.Alias('install',
          env.InstallProgram(env['xorp_moduledir'], mldlite))
if env['enable_builddirrun']:
    for obj in mldlite:
        env.AddPostAction(mldlite,
            env.Symlink(obj.abspath,
                os.path.join(env['xorp_alias_moduledir'], str(obj))))


Default(libmld6igmplite, igmplite, mldlite)
